[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2024-02-09 10:31:04.501976",
  "module": null,
  "name": "Guia de Remessa - incluindo op\u00e7\u00e3o de bot\u00e3o dentro do bot\u00e3o \"Status\"",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh(frm) {\n    setTimeout(() => {\n        frm.remove_custom_button('Close', 'Status');\n        frm.add_custom_button('Em Espera', 'Status');\n        }, 210);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-07-03 14:56:02.012665",
  "module": null,
  "name": "Confirma\u00e7\u00e3o se campo for vazio - Fatura de Venda",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    \n     validate: async (frm) => {\n         if (frm.doc.confirmacao_do_cliente === 'SIM' && (!frm.doc.tipo || !frm.doc.confirmacao)) {\n         \n        let prompt = new Promise((resolve, reject) => {\n            \n            frappe.confirm(\n                \"A confirma\u00e7\u00e3o do cliente est\u00e1 definida como 'SIM', por\u00e9m os campos relacionados de 'Tipo' ou de 'Confirma\u00e7\u00e3o' est\u00e3o sem informa\u00e7\u00e3o. Deseja continuar com a fatura?\",\n                () => resolve(),\n                () => reject()\n            );\n        });\n        await prompt.then(\n            () => frappe.show_alert(\"Confirmado\", 3), \n            () => {\n                frappe.validated = false;\n                frappe.show_alert(\"N\u00e3o Confirmado\", 3)\n            }\n        );\n         }\n        \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-23 09:34:22.384726",
  "module": null,
  "name": "Mensagem de alerta obter itens Fatura de Venda",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    onload: function(frm) {\n        // Verifica se o campo \"faturamento_parcial\" \u00e9 \"N\u00c3O\"\n        if (frm.doc.faturamento_parcial === 'N\u00c3O') {\n            // Exibe uma mensagem de alerta\n            frappe.msgprint({\n                title: __('Aviso de Faturamento Parcial'),\n                message: __('Este cliente n\u00e3o permite faturamento parcial. Certifique-se de obter os itens das Guias de Remessas vinculadas antes de criar a fatura de vendas.'),\n                \n             \n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank Account",
  "enabled": 1,
  "modified": "2024-01-15 16:05:17.610628",
  "module": null,
  "name": "incluindo M\u00e1scara nas informa\u00e7\u00f5es de pix dentro de Conta Banc\u00e1ria",
  "script": "frappe.ui.form.on('Bank Account', {\n   onload: function(frm) {\n        (async () => {\n            const response = await fetch(\"https://unpkg.com/imask\");\n            const scriptText = await response.text();\n            const script = document.createElement(\"script\");\n            script.text = scriptText;\n            document.head.appendChild(script);\n            const numeroDocumentoCPF_PIX = frm.fields_dict['cpf_pix'].$input[0];\n            const numeroDocumentoCNPJ_PIX = frm.fields_dict['cnpj_pix'].$input[0];\n            const numeroDocumentoCelular_PIX = frm.fields_dict['celular'].$input[0];\n            let mask = null;\n            numeroDocumentoCPF_PIX.setAttribute(\"maxlength\", 14);\n            mask = IMask(numeroDocumentoCPF_PIX, {\n                mask: '000.000.000-00'\n            });\n            numeroDocumentoCNPJ_PIX.setAttribute(\"maxlength\", 18);\n            mask = IMask(numeroDocumentoCNPJ_PIX, {\n                mask: '00.000.000/0000-00'\n            });\n            numeroDocumentoCelular_PIX.setAttribute(\"maxlength\", 15);\n            mask = IMask(numeroDocumentoCelular_PIX, {\n                mask: '(00) 00000-0000'\n            });\n           \n        })();\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-03-14 16:30:05.771287",
  "module": null,
  "name": "Verificando se Sales Order possui um or\u00e7amento aprovado antes de criar",
  "script": "frappe.ui.form.on('Sales Order', {\n    validate: async (frm) => {\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Quotation\",\n                filters: { name: frm.doc.quotation_name },\n                fieldname: \"workflow_state\"\n            },\n            callback: function(response) {\n                if (response.message && response.message.workflow_state) {\n                    let status = response.message.workflow_state;\n                    if(status !== \"Aprovado\") {\n                        frappe.msgprint(\n                        'Voc\u00ea s\u00f3 pode criar esse pedido de venda se o or\u00e7amento estiver aprovado. Por favor, verifique seu or\u00e7amento.',\n                        'Erro',\n                        function(){\n                            window.close();\n                        },\n                        \n                    )\n                        frappe.validated = false; // Impede que o formul\u00e1rio seja salvo\n                    }\n                } else {\n                    console.log(\"Workflow State n\u00e3o encontrado.\");\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Terms Template",
  "enabled": 1,
  "modified": "2023-01-12 13:30:12.371431",
  "module": null,
  "name": "Modelo de Termos de Pagamento",
  "script": "frappe.ui.form.on(\"Payment Terms Template\", {\n    validate(frm){\n        frm.set_value(\"allocate_payment_based_on_payment_terms\", 1);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2023-02-15 08:07:43.794080",
  "module": null,
  "name": "Atualiza\u00e7\u00e3o de Status autom\u00e1tico do Pedido de Venda para fechado",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n  on_submit: function(frm) {\n    console.log(\"frm.doc.reference_name: \" + frm.doc.reference_name);\n    // Recupera o valor total da fatura de venda\n    var invoice_total = frm.doc.base_total;\n\n    // Recupera o valor total do pedido de venda correspondente\n    var orders = frappe.db.get_list(\"Sales Order\", { filters: { reference_name: frm.doc.reference_name } });\n\n    var order_total = 0;\n    if (orders.length > 0) {\n      order_total = orders[0].base_total;\n    }\n\n    console.log(\"order_total: \" + order_total);\n    // Compare os valores para ver se eles s\u00e3o iguais\n    if (invoice_total === order_total) {\n      // Se os valores forem iguais, use a fun\u00e7\u00e3o frappe.set_value para definir o estado do pedido como conclu\u00eddo\n      frappe.model.set_value(\"Sales Order\", frm.doc.reference_name, \"status\", \"Closed\");\n      frappe.model.set_value(\"Sales Order\", frm.doc.reference_name, \"per_delivered\", 100);\n    }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2023-01-26 14:19:27.985436",
  "module": null,
  "name": "CNPJ",
  "script": "frappe.ui.form.on('Customer', {\n    onload: function(frm) {\n        (async () => {\n            const response = await fetch(\"https://unpkg.com/imask\");\n            const scriptText = await response.text();\n            const script = document.createElement(\"script\");\n            script.text = scriptText;\n            document.head.appendChild(script);\n            const tipoDocumento = frm.fields_dict['cnpj_cpf'].$input[0];\n            const numeroDocumento = frm.fields_dict['cnpj'].$input[0];\n            let mask = null;\n            numeroDocumento.setAttribute(\"maxlength\", 18);\n            mask = IMask(numeroDocumento, {\n                mask: '00.000.000/0000-00'\n            });\n            tipoDocumento.addEventListener(\"change\", function() {\n                if (mask) {\n                    mask.destroy();\n                }\n                if (this.value === \"CPF\") {\n                    numeroDocumento.value = \"\";\n                    numeroDocumento.setAttribute(\"maxlength\", 14);\n                    mask = IMask(numeroDocumento, {\n                        mask: '000.000.000-00'\n                    });\n                } else if (this.value === \"CNPJ\") {\n                    numeroDocumento.value = \"\";\n                    numeroDocumento.setAttribute(\"maxlength\", 18);\n                    mask = IMask(numeroDocumento, {\n                        mask: '00.000.000/0000-00'\n                    });\n                }\n            });\n        })();\n    }\n});\n\nfrappe.ui.form.on(\"Customer\", \"cnpj\", function(frm) {\n    frappe.call({\n        method: 'ordem_servico.api.get_cnpj',\n        args: {\n            'cnpj': frm.doc.cnpj,\n        },\n        callback: function(r) {\n            // code snippet\n            debugger;\n            Object.keys(r.message).forEach(key => frm.set_value(key, r.message[key]));\n        }\n    });\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2022-12-20 09:30:50.738687",
  "module": null,
  "name": "Quotation images",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    validate(frm){\n\tif (frm.doc.defeito_constatado && frm.doc.defeito_constatado.length){\n         frm.set_value(\"defeito_constatado\", frm.doc.defeito_constatado.replaceAll(\"img src=\", 'img style=\"max-width:150px; max-height:150px; width: auto; height: auto;\" src='));\n    }\n}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2023-09-04 10:33:20.996850",
  "module": null,
  "name": "Update Stock",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n    validate(frm){\n        frm.set_value(\"update_stock\", 1);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2022-12-20 09:30:39.227439",
  "module": null,
  "name": "CEP",
  "script": "frappe.ui.form.on(\"Address\", \"cep\", function (frm) { \n    if (!frm.doc.cep) \n    return; \nfrappe.call({ \n    method: 'ordem_servico.api.get_cep',\n    args: {\n\t   'cep': frm.doc.cep,\n    \t}, \n    callback: function(r) {\n        // code snippet\n\tdebugger;\n\tObject.keys(r.message).forEach(key => frm.set_value(key, r.message[key]));\n    } \n    }); \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2023-02-15 08:08:57.307199",
  "module": null,
  "name": "Ocultar eventos em oportunidade CRM",
  "script": "frappe.ui.form.on(\"Opportunity\", {\n  refresh: function(frm) {\n    setTimeout(function() {\n      // c\u00f3digo para esconder elementos na p\u00e1gina\n      $('div.open-events.pl-1').hide();\n      $('#opportunity-activities_tab > div:nth-child(1) > div > div > form > div > div > div.new-btn.pb-3 > span > button.btn.btn-sm.small.new-event-btn').hide();\n      $('#opportunity-activities_tab > div:nth-child(1) > div > div > form > div.frappe-control.form-group > div').hide();\n      $(document).ajaxComplete(function() {\n        // c\u00f3digo para esconder elementos na p\u00e1gina\n        $('div.open-events.pl-1').hide();\n        $('#opportunity-activities_tab > div:nth-child(1) > div > div > form > div > div > div.new-btn.pb-3 > span > button.btn.btn-sm.small.new-event-btn').hide();\n        $('#opportunity-activities_tab > div:nth-child(1) > div > div > form > div.frappe-control.form-group > div').hide();\n      });\n    },50);\n  }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2023-02-10 15:09:25.330246",
  "module": null,
  "name": "Realtime",
  "script": "frappe.realtime.on(\"doc_update\", data => {\n    if (data.doctype == cur_frm.doctype && data.name == cur_frm.docname) {\n        cur_frm.reload_doc();\n        console.log(\"Recarregando....\")\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-02-23 08:52:48.773311",
  "module": null,
  "name": "Valida\u00e7\u00e3o cep e numero",
  "script": "frappe.ui.form.on('Quotation', {\n    validate: function(frm) {\n        console.log(\"validate\")\n        // Obter o link do endere\u00e7o selecionado na cota\u00e7\u00e3o\n        var customer_address = frm.doc.customer_address;\n\n        if (!customer_address) {\n            return;\n        }\n\n        // Buscar o endere\u00e7o correspondente\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Address\",\n                name: customer_address\n            },\n            callback: function(r) {\n                var endereco = r.message;\n\n                if (endereco && (!endereco.cep || !endereco.numero)) {\n                    frappe.msgprint({\n                        title: __('Endere\u00e7o incompleto'),\n                        message: __('Por favor, preencha o CEP e o n\u00famero do endere\u00e7o antes de salvar.'),\n                        indicator: 'orange'\n                    });\n                    frappe.validated = false;\n                } else {\n                    frappe.validated = true;\n                }\n            }\n        });\n    }\n});\n\n// Adicionar um gatilho para verificar os campos novamente ao alterar o endere\u00e7o\nfrappe.ui.form.on('Quotation', 'customer_address', function(frm) {\n    frm.trigger('validate');\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2023-03-08 16:38:33.478777",
  "module": null,
  "name": "Data Ordem Interna",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    onload: function(frm) {\n        if (!frm.doc.tempo_inicio_recebimento) {\n            const now = frappe.datetime.now_datetime();\n            const formatted_date = frappe.datetime.str_to_user(now).replace(\" \",\" \");\n            frm.set_value(\"tempo_inicio_recebimento\", formatted_date);\n            frm.set_df_property(\"tempo_inicio_recebimento\", \"read_only\", 1);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2023-03-13 16:33:20.251859",
  "module": null,
  "name": "Definir obriga\u00e7\u00e3o nos campos de agendamento",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    refresh: function(frm) {\n    if (frm.doc.customer && frm.doc.contact_link && frm.doc.desc_item_nf && frm.doc.qtd_nf && frm.doc.cfop && frm.doc.ncm && frm.doc.serie_number && frm.doc.equipment_model && frm.doc.equipment_tag && frm.doc.equipment_description && frm.doc.tipo_servico != \"\")\n    frm.set_df_property('initial_scheduled_to', 'reqd', 1);\n    /*frm.set_df_property('quotation_schedule_date', 'reqd', 1);\n    frm.set_df_property('quotation_time', 'reqd', 1);*/\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2023-03-13 16:33:44.311274",
  "module": null,
  "name": "Incluir obriga\u00e7\u00e3o de Data de agendamento Ordem Servi\u00e7o",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    refresh: function(frm) {\n    if (frm.doc.customer && frm.doc.contact_link && frm.doc.desc_item_nf && frm.doc.qtd_nf && frm.doc.cfop && frm.doc.ncm && frm.doc.serie_number && frm.doc.equipment_model && frm.doc.equipment_tag && frm.doc.equipment_description && frm.doc.tipo_servico != \"\")\n    /*frm.set_df_property('initial_scheduled_to', 'reqd', 1);*/\n    frm.set_df_property('quotation_schedule_date', 'reqd', 1);\n    /*frm.set_df_property('quotation_time', 'reqd', 1);*/\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2023-03-10 13:39:09.825025",
  "module": null,
  "name": "Incluir Obriga\u00e7\u00e3o de tempo de agendamento no Doctype Ordem de Servi\u00e7o Interna",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    refresh: function(frm) {\n    if (frm.doc.customer && frm.doc.contact_link && frm.doc.nat_operacao && frm.doc.cfop && frm.doc.ncm && frm.doc.serie_number && frm.doc.equipment_model && frm.doc.equipment_tag && frm.doc.equipment_description && frm.doc.tipo_servico != \"\"){\n    frm.set_df_property('quotation_time', 'reqd', 1);\n    }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2023-03-14 07:58:16.280366",
  "module": null,
  "name": "Status Ordem Servi\u00e7o - Somente Leitura",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    refresh: function(frm) {\n    if (frm.doc.customer || frm.doc.contact_link || frm.doc.desc_item_nf || frm.doc.qtd_nf || frm.doc.cfop || frm.doc.ncm || frm.doc.serie_number || frm.doc.equipment_model || frm.doc.equipment_tag || frm.doc.equipment_description || frm.doc.tipo_servico == \"\"){\n    /*frm.set_df_property('initial_scheduled_to', 'reqd', 1);*/\n    frm.doc.status_order_service = \"Em Recebimento\"\n    frm.set_df_property('status_order_service', 'read_only', 1);\n    /*frm.set_df_property('quotation_time', 'reqd', 1);*/\n    }\n   \n}});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2023-03-14 07:53:00.843282",
  "module": null,
  "name": "Remover somente leitura status == \"Aguardando Or\u00e7amento\" Ordem Servico Interna",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n\trefresh(frm) {\n\tif(frm.doc.status_order_service == \"Aguardando Or\u00e7amento\"){\n    frm.set_df_property('status_order_service', 'read_only', 0);\n    \n    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2023-06-26 14:18:55.233679",
  "module": null,
  "name": "Valida\u00e7\u00e3o incluir cep em Endere\u00e7o em Cliente",
  "script": "frappe.ui.form.on('Customer', {\n    validate: function(frm) {\n        console.log(\"validate\")\n        // Obter o link do endere\u00e7o principal do cliente selecionado na cota\u00e7\u00e3o\n        var customer_primary_address = frm.doc.customer_primary_address;\n\n        if (!customer_primary_address) {\n            return;\n        }\n\n        // Buscar o endere\u00e7o correspondente\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Address\",\n                name: customer_primary_address\n            },\n            callback: function(r) {\n                var endereco = r.message;\n\n                if (endereco && (!endereco.cep || !endereco.numero)) {\n                    frappe.msgprint({\n                        title: __('Endere\u00e7o incompleto'),\n                        message: __('Por favor, preencha o CEP e o n\u00famero no campo de \"Endere\u00e7o Principal do Cliente\" antes de salvar.'),\n                        indicator: 'orange'\n                    });\n                    frappe.validated = false;\n                } else {\n                    frappe.validated = true;\n                }\n            }\n        });\n    }\n});\n\n// Adicionar um gatilho para verificar os campos novamente ao alterar o endere\u00e7o\nfrappe.ui.form.on('Customer', 'customer_primary_address', function(frm) {\n    frm.trigger('validate');\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2023-07-20 09:21:49.894034",
  "module": null,
  "name": "Puxar itens do Or\u00e7amento para Ordem Servico Interna com base no link selecionado de or\u00e7amento",
  "script": "",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-07-24 09:36:43.845348",
  "module": null,
  "name": "Incluir m\u00e1scara no RG e CPF no cadastro do Colaborador",
  "script": "frappe.ui.form.on('Employee', {\n   onload: function(frm) {\n        (async () => {\n            const response = await fetch(\"https://unpkg.com/imask\");\n            const scriptText = await response.text();\n            const script = document.createElement(\"script\");\n            script.text = scriptText;\n            document.head.appendChild(script);\n            const numeroDocumento = frm.fields_dict['cpf'].$input[0];\n            const numeroDocumentoRG = frm.fields_dict['cedula_de_identidade'].$input[0];\n            let mask = null;\n            numeroDocumento.setAttribute(\"maxlength\", 14);\n            mask = IMask(numeroDocumento, {\n                mask: '000.000.000-00'\n            });\n            numeroDocumentoRG.setAttribute(\"maxlength\", 12);\n            mask = IMask(numeroDocumentoRG, {\n                mask: '00.000.000-0'\n            });\n           \n        })();\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-07-25 11:24:46.386355",
  "module": null,
  "name": "incluindo M\u00e1scara nas informa\u00e7\u00f5es de pix dentro de colaborador",
  "script": "frappe.ui.form.on('Employee', {\n   onload: function(frm) {\n        (async () => {\n            const response = await fetch(\"https://unpkg.com/imask\");\n            const scriptText = await response.text();\n            const script = document.createElement(\"script\");\n            script.text = scriptText;\n            document.head.appendChild(script);\n            const numeroDocumentoCPF_PIX = frm.fields_dict['cpf_pix'].$input[0];\n            const numeroDocumentoCNPJ_PIX = frm.fields_dict['cnpj_pix'].$input[0];\n            const numeroDocumentoCelular_PIX = frm.fields_dict['celular'].$input[0];\n            let mask = null;\n            numeroDocumentoCPF_PIX.setAttribute(\"maxlength\", 14);\n            mask = IMask(numeroDocumentoCPF_PIX, {\n                mask: '000.000.000-00'\n            });\n            numeroDocumentoCNPJ_PIX.setAttribute(\"maxlength\", 18);\n            mask = IMask(numeroDocumentoCNPJ_PIX, {\n                mask: '00.000.000/0000-00'\n            });\n            numeroDocumentoCelular_PIX.setAttribute(\"maxlength\", 15);\n            mask = IMask(numeroDocumentoCelular_PIX, {\n                mask: '(00) 00000-0000'\n            });\n           \n        })();\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2023-07-25 11:29:12.319551",
  "module": null,
  "name": "Ocultando e Desocultando valor de sal\u00e1rio em colaborador",
  "script": "frappe.ui.form.on('Employee', {\n  onload: function(frm) {\n    const ctcInput = frm.get_field(\"ctc\").$input;\n    // Definir o valor do campo como '---'\n    ctcInput.val('---');\n  },\n  'visualizar': function(frm) {\n    const ctcInput = frm.get_field(\"ctc\").$input;\n    if (ctcInput.attr(\"type\") === \"text\") {\n      // Mostrar o valor original\n      ctcInput.val(frm.doc.ctc);\n      ctcInput.attr(\"type\", \"currency\");\n    } else {\n      // Ocultar o valor com '---'\n      ctcInput.val('---');\n      ctcInput.attr(\"type\", \"text\");\n    }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2023-08-03 14:05:11.659705",
  "module": null,
  "name": "Adicionando itens na tabela com base no link de or\u00e7amento",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n  has_quotation_link: function(frm) {\n    // Obter o valor do campo \"has_quotation_link\"\n    const quotation = frm.doc.has_quotation_link;\n\n    // Limpar a tabela se o campo \"has_quotation_link\" estiver vazio\n    if (!quotation) {\n      frm.clear_table('os_items');\n      frm.refresh_field('os_items');\n      return;\n    }\n\n    // Consultar a tabela de or\u00e7amento usando o valor do campo \"has_quotation_link\"\n    frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'Quotation',\n        name: quotation,\n      },\n      callback: function(response) {\n        const quotation_doc = response.message;\n\n        // Limpar a tabela antes de adicionar novos itens\n        frm.clear_table('os_items');\n\n        // Iterar sobre os itens do or\u00e7amento e adicionar \u00e0 tabela em Ordem Servico Interna\n        if (quotation_doc && quotation_doc.items) {\n          for (const item of quotation_doc.items) {\n            const row = frm.add_child('os_items');\n            row.item_code = item.item_code;\n            row.item_name = item.item_name;\n            row.item_qty = item.qty;\n            // Adicione outros campos necess\u00e1rios aqui\n          }\n          frm.refresh_field('os_items');\n        }\n      },\n    });\n  },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2023-08-03 14:15:26.191917",
  "module": null,
  "name": "Manter edit\u00e1vel campo de pontos de calibra\u00e7\u00e3o em Ordem Servico Interna",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    onload: function(frm) {\n        // Defina a a\u00e7\u00e3o a ser executada quando o formul\u00e1rio \u00e9 carregado\n        frm.add_fetch('has_quotation_link', 'pontos_de_calibracao', 'pontos_cal_criterios_aceitacao');\n\n        // Defina o campo como edit\u00e1vel no carregamento\n        frm.set_df_property('pontos_cal_criterios_aceitacao', 'read_only', 0);\n    },\n    refresh: function(frm) {\n        // Defina a a\u00e7\u00e3o a ser executada quando o formul\u00e1rio \u00e9 atualizado ou carregado\n        frm.set_df_property('pontos_cal_criterios_aceitacao', 'read_only', 0);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-08-15 14:13:42.253894",
  "module": null,
  "name": "Valida\u00e7\u00e3o pontos de calibra\u00e7\u00e3o vazio em or\u00e7amento",
  "script": "frappe.ui.form.on('Quotation', {\n    validate: function(frm) {\n        console.log(\"validate\");\n\n        // Obter o valor do campo pontos_de_calibracao\n        let pontos_de_calibracao = frm.doc.pontos_de_calibracao;\n\n        // Verificar se o campo est\u00e1 vazio ou cont\u00e9m apenas formata\u00e7\u00e3o HTML\n        let htmlContent = $('<div class=\"ql-editor ql-blank\" data-gramm=\"false\" contenteditable=\"true\"><p><br></p></div>').html(pontos_de_calibracao).text();\n        \n        if (!htmlContent.trim() && !frm.doc.hash_orc) {\n            frappe.msgprint({\n                title: __('Campos vazios'),\n                message: __('O Campo de \"Pontos de calibra\u00e7\u00e3o\" est\u00e1 vazio'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n        }\n        else{\n            frappe.validated = true;\n        }\n       \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-10-25 14:57:40.994636",
  "module": null,
  "name": "Confirma\u00e7\u00e3o se campo for vazio",
  "script": "frappe.ui.form.on('Sales Order', {\n    \n     validate: async (frm) => {\n         if (frm.doc.tipo == \"\"|| frm.doc.confirmacao ==\"\") {\n         \n        let prompt = new Promise((resolve, reject) => {\n            \n            frappe.confirm(\n                'Are you sure?',\n                () => resolve(),\n                () => reject()\n            );\n        });\n        await prompt.then(\n            () => frappe.show_alert(\"Submitted\", 3), \n            () => {\n                frappe.validated = false;\n                frappe.show_alert(\"Not submitted\", 3)\n            }\n        );\n         }\n        \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 1,
  "modified": "2024-06-28 13:09:02.746558",
  "module": null,
  "name": "Particularidades do cliente",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n    refresh: function(frm) {\n        update_headline(frm);\n    },\n    status_order_service: function(frm) {\n        update_headline(frm);\n    },\n    customer: function(frm) {\n        update_headline(frm);\n    }\n});\n\nfunction update_headline(frm) {\n    // Vari\u00e1vel para armazenar a nova mensagem\n    let new_headline = '';\n\n    if (frm.doc.status_order_service) {\n        if (frm.doc.customer) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Customer',\n                    name: frm.doc.customer\n                },\n                callback: function(r) {\n                    if (r.message && r.message.customer_details) {\n                        new_headline = 'Detalhes do cliente: ' + r.message.customer_details;\n                    } else {\n                        new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n                    }\n\n                    // Limpa e define o novo aviso se ele for diferente do atual\n                    if (frm.dashboard.headline !== new_headline) {\n                        frm.dashboard.clear_headline();\n                        frm.dashboard.set_headline(new_headline);\n                    }\n                }\n            });\n        } else {\n            new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n            \n            // Limpa e define o novo aviso se ele for diferente do atual\n            if (frm.dashboard.headline !== new_headline) {\n                frm.dashboard.clear_headline();\n                frm.dashboard.set_headline(new_headline);\n            }\n        }\n    } else {\n        frm.dashboard.clear_headline();\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-07-08 14:36:15.376652",
  "module": null,
  "name": "Particularidades do cliente Quotation",
  "script": "frappe.ui.form.on('Quotation', {\n    refresh: function(frm) {\n        update_headline(frm);\n    },\n    status_order_service: function(frm) {\n        update_headline(frm);\n    },\n    customer: function(frm) {\n        update_headline(frm);\n    }\n});\n\nfunction update_headline(frm) {\n    // Vari\u00e1vel para armazenar a nova mensagem\n    let new_headline = '';\n\n    if (frm.doc.status) {\n        if (frm.doc.party_name) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Customer',\n                    name: frm.doc.party_name\n                },\n                callback: function(r) {\n                    if (r.message && r.message.customer_details) {\n                        new_headline = 'Detalhes do cliente: ' + r.message.customer_details;\n                    } else {\n                        new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n                    }\n\n                    // Limpa e define o novo aviso se ele for diferente do atual\n                    if (frm.dashboard.headline !== new_headline) {\n                        frm.dashboard.clear_headline();\n                        frm.dashboard.set_headline(new_headline);\n                    }\n                }\n            });\n        } else {\n            new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n            \n            // Limpa e define o novo aviso se ele for diferente do atual\n            if (frm.dashboard.headline !== new_headline) {\n                frm.dashboard.clear_headline();\n                frm.dashboard.set_headline(new_headline);\n            }\n        }\n    } else {\n        frm.dashboard.clear_headline();\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-07-08 14:42:04.375006",
  "module": null,
  "name": "Particularidades do cliente Pedido Vendas",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        update_headline(frm);\n    },\n    status_order_service: function(frm) {\n        update_headline(frm);\n    },\n    customer: function(frm) {\n        update_headline(frm);\n    }\n});\n\nfunction update_headline(frm) {\n    // Vari\u00e1vel para armazenar a nova mensagem\n    let new_headline = '';\n\n    if (frm.doc.status) {\n        if (frm.doc.customer) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Customer',\n                    name: frm.doc.customer\n                },\n                callback: function(r) {\n                    if (r.message && r.message.customer_details) {\n                        new_headline = 'Detalhes do cliente: ' + r.message.customer_details;\n                    } else {\n                        new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n                    }\n\n                    // Limpa e define o novo aviso se ele for diferente do atual\n                    if (frm.dashboard.headline !== new_headline) {\n                        frm.dashboard.clear_headline();\n                        frm.dashboard.set_headline(new_headline);\n                    }\n                }\n            });\n        } else {\n            new_headline = 'Sem observa\u00e7\u00f5es referentes \u00e0s particularidades do cliente.';\n            \n            // Limpa e define o novo aviso se ele for diferente do atual\n            if (frm.dashboard.headline !== new_headline) {\n                frm.dashboard.clear_headline();\n                frm.dashboard.set_headline(new_headline);\n            }\n        }\n    } else {\n        frm.dashboard.clear_headline();\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2024-07-11 15:34:50.644638",
  "module": null,
  "name": "Bot\u00e3o Gerar Formul\u00e1rio de Visita",
  "script": "frappe.listview_settings['Ordem Servico Interna'] = {\n    onload: function(listview) {\n        listview.page.add_inner_button(__('Imprimir Formul\u00e1rio de Visita'), function() {\n            let selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let docnames = selected_docs.map(doc => doc.name).join(',');\n\n                let print_format = 'Formulario de Visita';\n                let print_url = frappe.urllib.get_full_url(`/api/method/frappe.utils.print_format.download_pdf?doctype=Ordem%20Servico%20Interna&name=${docnames}&format=${print_format}&no_letterhead=0`);\n\n                window.open(print_url, '_blank');\n            } else {\n                frappe.msgprint(__('Por favor, selecione pelo menos uma Ordem de Servi\u00e7o.'));\n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Interna",
  "enabled": 0,
  "modified": "2024-07-11 15:34:25.536262",
  "module": null,
  "name": "Limpar numero de serie ao inserir cliente na os",
  "script": "frappe.ui.form.on('Ordem Servico Interna', {\n\t\n\tcustomer: function(frm) {\n        frm.set_value('serie_number', ''); // Limpa o campo de equipamento\n    }\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Ordem Servico Externa",
  "enabled": 0,
  "modified": "2024-07-11 15:34:19.223691",
  "module": null,
  "name": "Limpar numero de serie ao inserir cliente na os externa",
  "script": "frappe.ui.form.on('Ordem Servico Externa', {\n    \n    customer: function(frm) {\n        frm.set_value('serie_number', ''); // Limpa o campo de equipamento\n    }\n    \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-07-11 15:39:44.008229",
  "module": null,
  "name": "Filtrar contatos da tabela de credito de clientes em clientes",
  "script": "frappe.ui.form.on('Customer', {\n    refresh: function(frm) {\n        // Filtro para o campo 'contato' na tabela 'credito_cliente'\n        frm.fields_dict['credito_cliente'].grid.get_field('contato').get_query = function(doc) {\n            return {\n                filters: {\n                    'link_doctype': 'Customer',\n                    'link_name': doc.name\n                }\n            };\n        };\n\n        // Filtro para o campo 'sales_order' na tabela 'credito_cliente'\n        frm.fields_dict['credito_cliente'].grid.get_field('sales_order').get_query = function(doc) {\n            return {\n                filters: {\n                    'customer': doc.name\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 }
]